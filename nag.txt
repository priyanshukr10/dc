Here‚Äôs a step-by-step guide to set up **Nagios Core** on **Debian** (works for Debian 11/12 and similar distros):

---

## üõ† Prerequisites

* A clean Debian server
* Root or sudo access
* Internet connection

---

## ‚úÖ Step 1: Install Dependencies

```bash
sudo apt update
sudo apt install -y autoconf gcc make apache2 php php-gd libgd-dev libapache2-mod-php \
  libperl-dev libssl-dev daemon unzip wget build-essential libtool \
  libmcrypt-dev snmp libnet-snmp-perl gettext
```

---

## ‚úÖ Step 2: Create Nagios User and Group

```bash
sudo useradd nagios
sudo groupadd nagcmd
sudo usermod -a -G nagcmd nagios
```

---

## ‚úÖ Step 3: Download and Compile Nagios Core

```bash
cd /tmp
wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.5.1.tar.gz
tar -xvzf nagios-4.5.1.tar.gz
cd nagios-4.5.1

./configure --with-command-group=nagcmd
make all
sudo make install
sudo make install-init
sudo make install-commandmode
sudo make install-config
sudo make install-webconf
```

---

## ‚úÖ Step 4: Create Web User

```bash
sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin
```

Create a password when prompted. This is the login for the Nagios web interface.

---

## ‚úÖ Step 5: Install Nagios Plugins

```bash
cd /tmp
wget https://nagios-plugins.org/download/nagios-plugins-2.4.0.tar.gz
tar -xvzf nagios-plugins-2.4.0.tar.gz
cd nagios-plugins-2.4.0

./configure --with-nagios-user=nagios --with-nagios-group=nagios
make
sudo make install
```

---

## ‚úÖ Step 6: Enable and Start Services

```bash
sudo systemctl enable apache2
sudo systemctl enable nagios
sudo systemctl start apache2
sudo systemctl start nagios
```

---

## ‚úÖ Step 7: Access Web Interface

Open your browser and go to:

```
http://<your_server_ip>/nagios
```

Login with:

* **Username:** `nagiosadmin`
* **Password:** (what you set earlier)

---

## ‚úÖ Step 8: Verify & Test

Check Nagios status:

```bash
sudo systemctl status nagios
```

---

## üîß Optional: Firewall

Allow HTTP if using `ufw`:

```bash
sudo ufw allow Apache
sudo ufw enable
```

---

## üß™ Test a Host

Edit config to monitor localhost:

```bash
sudo nano /usr/local/nagios/etc/servers/localhost.cfg
```

Add a host definition, or use the default. Restart Nagios after edits:

```bash
sudo systemctl restart nagios
```

---

Would you like a script to automate all this or help adding remote host monitoring with NRPE?


You're on the right track‚ÄîNagios is successfully monitoring a second Debian machine (`deb-1`) using **NRPE**. From the screenshot, we see services like disk usage, memory, uptime, and process count.

Let‚Äôs now set it up **cleanly and correctly** for another Debian system with these exact services.

---

# ‚úÖ Step-by-Step: Monitor Another Debian Host with NRPE (like `deb-1`)

---

## üß± Step 1: On the **Remote Debian Host** (e.g. `deb-2`)

### Install NRPE and plugins:

```bash
sudo apt update
sudo apt install nagios-nrpe-server nagios-plugins
```

### Configure NRPE:

```bash
sudo nano /etc/nagios/nrpe.cfg
```

* Find the line:

  ```ini
  allowed_hosts=127.0.0.1
  ```

  Change it to:

  ```ini
  allowed_hosts=127.0.0.1,<nagios-server-ip>
  ```

### Add custom commands (bottom of `nrpe.cfg`):

```ini
command[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib/nagios/plugins/check_load -w 1.0,0.5,0.2 -c 5.0,4.0,3.0
command[check_disk]=/usr/lib/nagios/plugins/check_disk -w 20% -c 10% -p /
command[check_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200
command[check_mem]=/usr/lib/nagios/plugins/check_mem.pl -w 80 -c 90
command[check_uptime]=/usr/lib/nagios/plugins/check_uptime -w 1: -c 0:10
command[check_hostname]=/bin/echo "Hostname: $(hostname)"
```

> If `check_mem.pl` or `check_uptime` isn‚Äôt available, I can give you quick scripts for them.

### Restart NRPE:

```bash
sudo systemctl restart nagios-nrpe-server
```

---

## üñ•Ô∏è Step 2: On the **Nagios Server**

### Create host definition:

```bash
sudo nano /usr/local/nagios/etc/servers/deb-2.cfg
```

Paste:

```cfg
define host {
    use             linux-server
    host_name       deb-2
    alias           Debian Remote Host
    address         <deb-2-ip>
    max_check_attempts 3
    check_period    24x7
    notification_interval 30
    notification_period 24x7
}
```

---

### Add service checks (same as in your screenshot):

```cfg
define service {
    use                 generic-service
    host_name           deb-2
    service_description Agent Version
    check_command       check_nrpe!check_nrpe_version
}

define service {
    use                 generic-service
    host_name           deb-2
    service_description Hostname
    check_command       check_nrpe!check_hostname
}

define service {
    use                 generic-service
    host_name           deb-2
    service_description Logical Disk Usage
    check_command       check_nrpe!check_disk
}

define service {
    use                 generic-service
    host_name           deb-2
    service_description Network Interface
    check_command       check_nrpe!check_ifoperstatus!ens33!up
}

define service {
    use                 generic-service
    host_name           deb-2
    service_description Processes Count
    check_command       check_nrpe!check_procs
}

define service {
    use                 generic-service
    host_name           deb-2
    service_description Uptime
    check_command       check_nrpe!check_uptime
}

define service {
    use                 generic-service
    host_name           deb-2
    service_description Virtual Memory
    check_command       check_nrpe!check_mem
}
```

> ‚ö†Ô∏è Make sure the NRPE server has the matching command definitions!

---

### Reload Nagios:

```bash
sudo systemctl restart nagios
```

---

## ‚úÖ You should now see `deb-2` listed with:

* Agent version
* Hostname
* Disk usage
* Network interface
* Process count
* Uptime
* Virtual memory

---

## ‚ö†Ô∏è Troubleshooting Tips

* üîç If you see ‚ÄúNRPE: Unable to read output‚Äù ‚Äì check that:

  * The command exists on the remote system.
  * No syntax errors exist in NRPE.
  * Permissions allow `nagios` user to run it.

* üß™ Test from Nagios server:

```bash
/usr/lib/nagios/plugins/check_nrpe -H <deb-2-ip> -c check_disk
```

---

Would you like a ready-to-paste working `check_mem.pl` or `check_uptime` plugin if they're missing?


You're monitoring a **Windows 10 machine (`win10-1`)** using **NCPA (Nagios Cross-Platform Agent)**‚Äîwhich is the right choice for Windows. However, all checks are in **CRITICAL** state with the error:

```
Usage: check_ncpa.py [options]
```

This indicates that the **Nagios check command is missing required arguments**. Let's fix it by properly defining the `check_ncpa.py` commands on the **Nagios server** and ensuring NCPA is properly configured on the **Windows host**.

---

# ‚úÖ Fix and Set Up Monitoring for Windows Host (`win10-1`) using NCPA

---

## üß© 1. What Went Wrong?

The error you're seeing means the command like this was used incorrectly:

```bash
check_ncpa.py
```

It needs proper arguments like:

```bash
check_ncpa.py -H <host> -t <token> -P <port> -M <metric> -w <warn> -c <crit>
```

---

## üß± 2. On the Windows Host

### ‚úÖ Install & Configure NCPA

1. Download NCPA for Windows from:
   [https://www.nagios.org/ncpa/](https://www.nagios.org/ncpa/)

2. During installation:

   * Set a secure **token** (you'll need this for the Nagios config).
   * Allow through Windows Firewall (port `5693` TCP by default).

3. Verify NCPA is running:

   * Open browser:
     `https://<win10-1-ip>:5693`
   * Login using the token.

---

## üñ•Ô∏è 3. On the Nagios Server

### ‚úÖ Define NCPA Command

Edit your Nagios commands config:

```bash
sudo nano /usr/local/nagios/etc/objects/commands.cfg
```

Add (if not already defined):

```cfg
define command {
    command_name check_ncpa
    command_line $USER1$/check_ncpa.py -H $HOSTADDRESS$ -t $ARG1$ -M $ARG2$ -w $ARG3$ -c $ARG4$
}
```

> Ensure `check_ncpa.py` is in `/usr/lib/nagios/plugins/` or adjust path accordingly.

---

### ‚úÖ Define Host

```cfg
define host {
    use             windows-server
    host_name       win10-1
    alias           Windows 10 Machine
    address         <win10-1-ip>
}
```

---

### ‚úÖ Define Services (based on your screenshot)

```cfg
define service {
    use                     generic-service
    host_name               win10-1
    service_description     C Drive Usage
    check_command           check_ncpa!mytoken!/disk/logical/C:|used_percent!80!90
}

define service {
    use                     generic-service
    host_name               win10-1
    service_description     CPU Usage
    check_command           check_ncpa!mytoken!/cpu/percent!80!90
}

define service {
    use                     generic-service
    host_name               win10-1
    service_description     NCPA Version
    check_command           check_ncpa!mytoken!/agent/plugin_version!1!2
}

define service {
    use                     generic-service
    host_name               win10-1
    service_description     Network Interface
    check_command           check_ncpa!mytoken!/interface/eth0/tx_bytes!1000000!2000000
}

define service {
    use                     generic-service
    host_name               win10-1
    service_description     Process Count
    check_command           check_ncpa!mytoken!/processes!150!200
}

define service {
    use                     generic-service
    host_name               win10-1
    service_description     Server Name
    check_command           check_ncpa!mytoken!/system/hostname!0!0
}

define service {
    use                     generic-service
    host_name               win10-1
    service_description     System Uptime
    check_command           check_ncpa!mytoken!/system/uptime!3600!1800
}

define service {
    use                     generic-service
    host_name               win10-1
    service_description     Virtual Memory Usage
    check_command           check_ncpa!mytoken!/memory/virtual/percent!80!90
}
```

> Replace `mytoken` with the actual token you configured in NCPA.

---

## üîÅ Restart Nagios

```bash
sudo systemctl restart nagios
```

---

## ‚úÖ After Setup

You should now see **green/OK** statuses for the services if NCPA is reachable and arguments are correct.

---

Would you like me to generate a complete `.cfg` file or help you test connectivity with `check_ncpa.py` manually?


Got it! You want to **customize the service names** in Nagios like:

```
252427-Current Load  
252427-HTTP  
252427-SSH  
```

This is controlled by the `service_description` field in your Nagios service definitions.

---

## ‚úÖ How to Name Services with Prefix (e.g., `252427-`)

### üìçEdit Service Definitions

Open the config file for your host:

```bash
sudo nano /usr/local/nagios/etc/servers/localhost.cfg
```

Change each `service_description` to include your desired prefix. For example:

```cfg
define service {
    use                     generic-service
    host_name               localhost
    service_description     252427-Current Load
    check_command           check_load
}

define service {
    use                     generic-service
    host_name               localhost
    service_description     252427-HTTP
    check_command           check_http
}

define service {
    use                     generic-service
    host_name               localhost
    service_description     252427-SSH
    check_command           check_ssh
}
```

Repeat for all relevant services.

---

### üîÅ Restart Nagios

Once you've updated the descriptions:

```bash
sudo systemctl restart nagios
```

---

### ‚úÖ Result

Your Nagios web interface will now show service names like:

* `252427-HTTP`
* `252427-PING`
* `252427-SSH`

---

Would you like a template file for a full host with all services using this naming format?


Here’s a **complete guide to automating `iptables` with Bash scripting**, using **advanced features**, including **module loading** and **GeoIP blocking** with `xtables-addons`.

---

## ⚙️ 1. Automating `iptables` with Bash Scripting

You can create a reusable script to configure your firewall at boot or on demand.

### ✅ Sample Bash Script: `firewall.sh`

```bash
#!/bin/bash

# Clear existing rules
iptables -F
iptables -X

# Default policy
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

# Allow loopback
iptables -A INPUT -i lo -j ACCEPT

# Allow established connections
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow SSH
iptables -A INPUT -p tcp --dport 22 -j ACCEPT

# Allow web traffic
iptables -A INPUT -p tcp -m multiport --dports 80,443 -j ACCEPT

# Log dropped packets (optional)
iptables -A INPUT -j LOG --log-prefix "iptables dropped: "

echo "Firewall rules applied."
```

### 🔐 Make it executable:

```bash
chmod +x firewall.sh
sudo ./firewall.sh
```

To persist across reboots:

* Use `netfilter-persistent`:

  ```bash
  sudo apt install iptables-persistent
  sudo netfilter-persistent save
  ```

Or call the script from `/etc/rc.local` or a `systemd` service.

---

## 🧠 2. Advanced iptables Usage

### ✅ Connection Rate Limiting (Basic DoS protection)

```bash
iptables -A INPUT -p tcp --dport 22 -m connlimit --connlimit-above 3 -j REJECT
```

### ✅ Block Port Scans

```bash
iptables -N PORTSCAN
iptables -A PORTSCAN -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j RETURN
iptables -A PORTSCAN -j DROP
```

### ✅ SYN Flood Protection

```bash
iptables -A INPUT -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
```

---

## 📦 3. Loading Kernel Modules for iptables

Some advanced features require manually loading modules.

### ✅ Common Modules:

```bash
sudo modprobe ip_conntrack
sudo modprobe ip_tables
sudo modprobe xt_conntrack
```

You can also add them to load on boot:

```bash
echo "ip_tables" | sudo tee -a /etc/modules
echo "xt_conntrack" | sudo tee -a /etc/modules
```

Check if loaded:

```bash
lsmod | grep ip_
```

---

## 🌍 4. GeoIP Blocking using `xtables-addons`

### ✅ Step-by-step Guide

#### Step 1: Install `xtables-addons`

```bash
sudo apt update
sudo apt install xtables-addons-common xtables-addons-source dkms
```

#### Step 2: Build and install GeoIP support

```bash
sudo apt install build-essential module-assistant
sudo module-assistant prepare
sudo module-assistant auto-install xtables-addons
```

#### Step 3: Download and Build GeoIP DB

```bash
mkdir /usr/share/xt_geoip
cd /usr/share/xt_geoip
/usr/lib/xtables-addons/xt_geoip_dl
/usr/lib/xtables-addons/xt_geoip_build -D . *.csv
```

> If above fails, manually download GeoLite2 country CSV files from MaxMind.

---

### ✅ Example: Block China (CN) and Russia (RU)

```bash
iptables -A INPUT -m geoip --src-cc CN,RU -j DROP
```

### ✅ Allow only US traffic

```bash
iptables -A INPUT -m geoip ! --src-cc US -j DROP
```

> GeoIP only works with **IPv4**, not IPv6.

---

## 📁 Example Script: `geoip_firewall.sh`

```bash
#!/bin/bash

# Flush existing rules
iptables -F

# Set default policy
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

# Allow loopback
iptables -A INPUT -i lo -j ACCEPT

# Allow established/related
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Block traffic from China & Russia
iptables -A INPUT -m geoip --src-cc CN,RU -j DROP

# Allow US traffic
iptables -A INPUT -m geoip --src-cc US -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -m geoip --src-cc US -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -m geoip --src-cc US -p tcp --dport 443 -j ACCEPT

echo "GeoIP firewall rules applied."
```

---
Great topics! Let's dive into **access control** and **internet sharing** using `iptables`, both critical for network security and administration.

---

## 🔐 1. Access Control Using `iptables`

Access control with `iptables` involves **allowing or denying specific IPs, subnets, ports, or protocols**.

### 🔹 A. Allow or Deny Specific IPs

**Allow access from a specific IP:**

```bash
iptables -A INPUT -s 192.168.1.100 -j ACCEPT
```

**Block an IP completely:**

```bash
iptables -A INPUT -s 192.168.1.200 -j DROP
```

**Block an entire country (with xtables-addons):**

```bash
iptables -A INPUT -m geoip --src-cc CN -j DROP
```

---

### 🔹 B. Restrict Access to Specific Ports

**Allow SSH only from one IP:**

```bash
iptables -A INPUT -p tcp --dport 22 -s 203.0.113.5 -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j DROP
```

**Allow HTTP for everyone but deny FTP:**

```bash
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 21 -j DROP
```

---

### 🔹 C. Time-Based Access Control (using `xt_time` module)

**Allow HTTP access from 9 AM to 5 PM:**

```bash
iptables -A INPUT -p tcp --dport 80 -m time --timestart 09:00 --timestop 17:00 --kerneltz -j ACCEPT
```

> Make sure the module is loaded: `modprobe xt_time`

---

## 🌐 2. Internet Sharing Using `iptables` (NAT / Masquerading)

This setup allows clients on a **private LAN** to access the internet **through a Linux gateway**.

### 💡 Scenario

* WAN Interface: `eth0` (Internet)
* LAN Interface: `eth1` (Private LAN: 192.168.1.0/24)

---

### ✅ Step-by-Step Guide

### A. Enable IP Forwarding

```bash
echo 1 > /proc/sys/net/ipv4/ip_forward
```

Make it permanent:

```bash
echo "net.ipv4.ip_forward=1" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
```

---

### B. Configure NAT (Masquerading)

```bash
iptables -t nat -A POSTROUTING -o eth0 -s 192.168.1.0/24 -j MASQUERADE
```

This tells iptables to **rewrite source IPs** of outgoing packets to the IP of `eth0`.

---

### C. Allow Forwarding Between Interfaces

```bash
iptables -A FORWARD -i eth1 -o eth0 -s 192.168.1.0/24 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
iptables -A FORWARD -i eth0 -o eth1 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
```

---

### ✅ Optional: DHCP and DNS on Gateway (using `dnsmasq`)

Install `dnsmasq` for DNS and DHCP:

```bash
sudo apt install dnsmasq
```

Basic config (`/etc/dnsmasq.conf`):

```conf
interface=eth1
dhcp-range=192.168.1.100,192.168.1.200,12h
```

Restart:

```bash
sudo systemctl restart dnsmasq
```

---

### 🔒 Restrict Access by MAC/IP/Port (optional)

Block all devices except certain MACs:

```bash
iptables -A FORWARD -m mac --mac-source AA:BB:CC:DD:EE:FF -j ACCEPT
iptables -A FORWARD -j DROP
```

---

### 🔁 Save the Rules

For Debian/Ubuntu:

```bash
sudo apt install iptables-persistent
sudo netfilter-persistent save
```

---
Excellent topics. Let’s dive into **iptables port forwarding** and a common **real-world use case: Fail2ban integration with iptables**.

---

## 🔁 1. **iptables Port Forwarding** (Using NAT)

### 🧩 What is Port Forwarding?

Port forwarding redirects traffic from one port/interface to another. It’s commonly used to:

* Expose services behind a NAT router
* Redirect external ports to internal services

### 🧱 Scenario:

You want to forward **port 8080 on WAN** (eth0) to a **web server on port 80 in LAN** (192.168.1.100).

---

### ✅ A. Enable IP Forwarding (if not already)

```bash
echo 1 > /proc/sys/net/ipv4/ip_forward
```

Make it persistent:

```bash
echo "net.ipv4.ip_forward=1" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
```

---

### ✅ B. DNAT: Forward External Port to Internal Server

```bash
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 8080 -j DNAT --to-destination 192.168.1.100:80
```

### ✅ C. Allow Forwarding in the `FORWARD` Chain

```bash
iptables -A FORWARD -p tcp -d 192.168.1.100 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
```

> Optional: SNAT the source to the gateway IP (useful in certain NAT cases):

```bash
iptables -t nat -A POSTROUTING -d 192.168.1.100 -p tcp --dport 80 -j MASQUERADE
```

---

### 🔍 Example Use Cases

| Use Case                                    | Port Forwarding Rule                 |
| ------------------------------------------- | ------------------------------------ |
| Forward HTTP on port 8080 → internal 80     | `--dport 8080 --to 192.168.1.100:80` |
| Forward external SSH (2222) → internal (22) | `--dport 2222 --to 192.168.1.100:22` |

---

## 🚫 2. iptables Use Case: **Fail2ban Integration**

### 🔐 What is Fail2ban?

**Fail2ban** scans logs for suspicious activity (e.g., failed SSH logins) and **automatically bans IPs using iptables**.

---

### ✅ A. Install Fail2ban

```bash
sudo apt update
sudo apt install fail2ban
```

---

### ✅ B. Basic SSH Jail Configuration

Create a local override file:

```bash
sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
```

Edit the file:

```ini
[sshd]
enabled  = true
port     = ssh
filter   = sshd
logpath  = /var/log/auth.log
maxretry = 5
bantime  = 600
findtime = 300
backend  = systemd
```

---

### ✅ C. Check Active Rules

After starting:

```bash
sudo systemctl enable --now fail2ban
sudo fail2ban-client status sshd
```

You’ll see:

* Banned IPs
* Number of attempts
* Ban duration

---

### ✅ D. How Fail2ban Uses iptables

Fail2ban dynamically adds rules to iptables:

```bash
iptables -L -n | grep f2b
```

You’ll see chains like:

```
Chain f2b-sshd (1 references)
 target     prot opt source               destination
 DROP       all  --  203.0.113.45         0.0.0.0/0
```

---

### 🛠 Custom Fail2ban Actions with iptables

You can create custom jail configurations or modify actions:

```bash
/etc/fail2ban/action.d/iptables-multiport.conf
```

Change default ban actions, e.g., `REJECT` vs `DROP`.

---


---

## ✅ Example Script: Port Forward + Fail2ban

```bash
#!/bin/bash

# Enable IP forwarding
echo 1 > /proc/sys/net/ipv4/ip_forward

# Port forward 8080 → 192.168.1.100:80
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 8080 -j DNAT --to 192.168.1.100:80
iptables -A FORWARD -p tcp -d 192.168.1.100 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
```

---


